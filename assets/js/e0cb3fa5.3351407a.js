"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[307],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4488:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:30},i="Crashlytics",s={unversionedId:"crashlytics/README",id:"crashlytics/README",title:"Crashlytics",description:"With the kermit-crashlytics module, you can setup kermit to automatically send bread crumbs and crash reports to",source:"@site/docs/crashlytics/README.md",sourceDirName:"crashlytics",slug:"/crashlytics/",permalink:"/docs/crashlytics/",draft:!1,editUrl:"https://github.com/touchlab/Kermit/tree/main/website/docs/crashlytics/README.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1676861205,formattedLastUpdatedAt:"Feb 20, 2023",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"LogWriter",permalink:"/docs/LOG_WRITER"},next:{title:"Bugsnag",permalink:"/docs/bugsnag/"}},l={},c=[{value:"Step 1: Add Crashlytics to Your Native Project",id:"step-1-add-crashlytics-to-your-native-project",level:2},{value:"Step 2: Setup Kermit Crash Logging",id:"step-2-setup-kermit-crash-logging",level:2},{value:"iOS",id:"ios",level:3},{value:"Testing",id:"testing",level:2},{value:"NSExceptionKt",id:"nsexceptionkt",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"crashlytics"},"Crashlytics"),(0,a.kt)("p",null,"With the ",(0,a.kt)("inlineCode",{parentName:"p"},"kermit-crashlytics")," module, you can setup kermit to automatically send bread crumbs and crash reports to\nFirebase Crashlytics"),(0,a.kt)("p",null,"If you just want to write crash reports without using Kermit logging, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/touchlab/CrashKiOS"},"CrashKiOS")),(0,a.kt)("h2",{id:"step-1-add-crashlytics-to-your-native-project"},"Step 1: Add Crashlytics to Your Native Project"),(0,a.kt)("p",null,"If you already have your app setup with Crashlytics, you can skip this step, otherwise follow the steps in the Firebase\ndocs to add Crashlytics crash reporting to both your ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/crashlytics/get-started?authuser=0&platform=android"},"Android"),"\nand ",(0,a.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/crashlytics/get-started?authuser=0&platform=ios"},"iOS")," "),(0,a.kt)("h2",{id:"step-2-setup-kermit-crash-logging"},"Step 2: Setup Kermit Crash Logging"),(0,a.kt)("p",null,"First, make sure you have a dependency on ",(0,a.kt)("inlineCode",{parentName:"p"},"kermit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"kermit-crashlytics")," artifacts in your ",(0,a.kt)("inlineCode",{parentName:"p"},"commonMain")," source set in\nyour shared modules ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'    sourceSets {\n        commonMain {\n            dependencies {\n                implementation("co.touchlab:kermit:${KERMIT_VERSION}")\n                implementation("co.touchlab:kermit-crashlytics:${KERMIT_VERSION}")\n            }\n        }\n...\n')),(0,a.kt)("p",null,"Second, setup the ",(0,a.kt)("inlineCode",{parentName:"p"},"CrashlyticsLogWriter")," with your ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger"),". The constructor for both platforms is the same, so in\nshared code, or in platform-specific Kotlin, run the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"Logger.addLogWriter(CrashlyticsLogWriter())\n")),(0,a.kt)("p",null,"On either  platform, you should make sure logging is configured immediately after Crashlytics is initialized, to avoid\na gap where some other failure may happen but logging is not capturing info."),(0,a.kt)("h3",{id:"ios"},"iOS"),(0,a.kt)("p",null,"For iOS, besides regular logging, you will also want to configure Kotlin's uncaught exception handling. ",(0,a.kt)("inlineCode",{parentName:"p"},"kermit-crashlytics"),"\nprovides the ",(0,a.kt)("inlineCode",{parentName:"p"},"setupCrashlyticsExceptionHook")," helper function to handle this for you."),(0,a.kt)("p",null,"If you don't need to make kermit logging calls from Swift/Objective C code, we recommend not exporting Kermit in the\nframework exposed to your iOS app. To setup Kermit configuration you can make a top level helper method in\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"iosMain")," source set that you call from Swift code. The same rule of thumb applies\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"kermit-crashlytics")," and since the added api is only needed for configuration, a Kotlin helper method is\nalmost always the best option. Here is a basic example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// in Kermit/AppInit.kt\nfun setupKermit() {\n    Logger.addLogWriter(CrashlyticsLogWriter())\n    setupCrashlyticsExceptionHook(Logger)\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"// in AppDelegate.swift\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    ...\n    func application(\n        _ application: UIApplication, \n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n    ) -> Bool {\n        // Note: This MUST be the first two statement, in this order, for Kermit and Crashlytics\n        // to handle any crashes in your app launch. \n        // If the app crashes before these calls run, it will not show up properly in the dashboard\n        FirebaseApp.configure()\n        AppInitKt.setupKermit()\n        //...\n    }\n}\n")),(0,a.kt)("h2",{id:"testing"},"Testing"),(0,a.kt)("p",null,"If you are building a ",(0,a.kt)("strong",{parentName:"p"},"static")," framework and you see errors such as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'Undefined symbols for architecture x86_64:\n  "_OBJC_CLASS_$_FIRCrashlytics", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:crashlytics-cache.a(result.o)\n  "_OBJC_CLASS_$_FIRExceptionModel", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:crashlytics-cache.a(result.o)\n  "_OBJC_CLASS_$_FIRStackFrame", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:crashlytics-cache.a(result.o)\nld: symbol(s) not found for architecture x86_64\n')),(0,a.kt)("p",null,"Then you may need to disable caching for that architecture by adding the following line to ",(0,a.kt)("inlineCode",{parentName:"p"},"gradle.properties"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},"kotlin.native.cacheKind.iosX64=none\n")),(0,a.kt)("p",null,"If you're building a ",(0,a.kt)("strong",{parentName:"p"},"dynamic")," framework, or you're using Kotlin version 1.8.0+ which builds dynamic by default,\nbuilding for tests will give you an error like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'Undefined symbols for architecture x86_64:\n  "_OBJC_CLASS_$_FIRStackFrame", referenced from:\n      objc-class-ref in result.o\n  "_OBJC_CLASS_$_FIRExceptionModel", referenced from:\n      objc-class-ref in result.o\n  "_OBJC_CLASS_$_FIRCrashlytics", referenced from:\n      objc-class-ref in result.o\n  "_FIRCLSExceptionRecordNSException", referenced from:\n      _co_touchlab_crashkios_crashlytics_FIRCLSExceptionRecordNSException_wrapper0 in result.o\nld: symbol(s) not found for architecture x86_64\n')),(0,a.kt)("p",null,"To resolve this, you should tell the linker that Bugsnag will be added later. You can do that directly, or you can use our Gradle plugin. It will find all Xcode Frameworks being built by Kotlin and add the necessary linker arguments."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n  id("co.touchlab.crashkios.crashlyticslink") version "x.y.z"\n}\n')),(0,a.kt)("h2",{id:"nsexceptionkt"},"NSExceptionKt"),(0,a.kt)("p",null,"CrashKiOS and Kermit previously created 2 reports on a crash because none of the crash reporting clients had an obvious way to do one. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rickclephas"},"Rick Clephas")," has done some excellent work figuring that out with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rickclephas/NSExceptionKt"},"NSExceptionKt"),". CrashKiOS and Kermit now use parts of NSExceptionKt for crash handling."))}u.isMDXComponent=!0}}]);