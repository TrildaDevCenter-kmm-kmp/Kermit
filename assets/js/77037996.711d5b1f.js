"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[463],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,c=d["".concat(s,".").concat(u)]||d[u]||g[u]||o;return n?a.createElement(c,i(i({ref:t},p),{},{components:n})):a.createElement(c,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={},i="Message Formatting",l={unversionedId:"configuration/MESSAGE_FORMATTING",id:"configuration/MESSAGE_FORMATTING",title:"Message Formatting",description:"To make message formatting more uniform and flexible, many of the LogWriter instances can take a MessageStringFormatter parameter. This allows you to control how log messages are presented and apply common formatting.",source:"@site/docs/configuration/MESSAGE_FORMATTING.md",sourceDirName:"configuration",slug:"/configuration/MESSAGE_FORMATTING",permalink:"/docs/configuration/MESSAGE_FORMATTING",draft:!1,editUrl:"https://github.com/touchlab/Kermit/tree/main/website/docs/configuration/MESSAGE_FORMATTING.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1678474676,formattedLastUpdatedAt:"Mar 10, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Logger Setup",permalink:"/docs/configuration/LOGGER_SETUP"},next:{title:"Non-Kotlin Environments",permalink:"/docs/configuration/NON_KOTLIN"}},s={},m=[{value:"Log Message Components",id:"log-message-components",level:2},{value:"Implementations",id:"implementations",level:2},{value:"<code>DefaultLogFormatter</code>",id:"defaultlogformatter",level:3},{value:"<code>NoTagFormatter</code>",id:"notagformatter",level:3},{value:"<code>SimpleLogFormatter</code>",id:"simplelogformatter",level:3},{value:"Configuration",id:"configuration",level:2}],p={toc:m};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"message-formatting"},"Message Formatting"),(0,r.kt)("p",null,"To make message formatting more uniform and flexible, many of the ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances can take a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageStringFormatter")," parameter. This allows you to control how log messages are presented and apply common formatting."),(0,r.kt)("admonition",{title:"TL;DR",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you don't want tags to be printed in your iOS or JS log statements, give your ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances ",(0,r.kt)("inlineCode",{parentName:"p"},"NoTagFormatter"),". This will suppress printing tag in log message strings. Tag will still be sent to Android log messages."),(0,r.kt)("p",{parentName:"admonition"},"For the global ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," and the platform ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter"),", config would look like the following:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"Logger.setLogWriters(platformLogWriter(NoTagFormatter))\n")),(0,r.kt)("p",{parentName:"admonition"},"For most use cases, this is all you need to know about formatters. The rest of this doc explains them in more detail.")),(0,r.kt)("h2",{id:"log-message-components"},"Log Message Components"),(0,r.kt)("p",null,"There are 3 parts to a message: Severity, Tag, and the Message itself. All loggers accept a log message string, but support for severity and tag vary between systems. Here is a breakdown of support for a few commonly used logging systems."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"System"),(0,r.kt)("th",{parentName:"tr",align:null},"Severity"),(0,r.kt)("th",{parentName:"tr",align:null},"Tag"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Android"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OSLog (iOS)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JS-Console"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SystemWriter (jvm)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Common (println)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,r.kt)("p",null,"The main purpose of ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageStringFormatter")," is to manage situations where the logging system does not support either Severity or Tag. The ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter")," instance will pass null's to the ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageStringFormatter")," in cases where the ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter")," natively supports Severity or Tag."),(0,r.kt)("p",null,"For example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultLogFormatter")," will result in the following message strings depending on platform:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Log call\nLogger.w(tag = \"ATag\") { \"A Log Message\" }\n\n// Android\n// 'A Log Message'\n\n// OSLog\n// '(ATag) A Log Message'\n\n// Common\n// 'Warn: (ATag) A Log Message'\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You ",(0,r.kt)("em",{parentName:"p"},"can")," use ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageStringFormatter")," to implement custom message strings. Maybe, say, add a special date format to each line. However, Kermit uses them to manage Severity and Tag for systems that don't natively support those constructs. Note: the Android ",(0,r.kt)("inlineCode",{parentName:"p"},"LogcatWriter")," does not currently use a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageStringFormatter"),". You would need to create a custom implementation to support that.")),(0,r.kt)("h2",{id:"implementations"},"Implementations"),(0,r.kt)("p",null,"Kermit provides a few implementations out of the box."),(0,r.kt)("h3",{id:"defaultlogformatter"},(0,r.kt)("inlineCode",{parentName:"h3"},"DefaultLogFormatter")),(0,r.kt)("p",null,"This is the standard format that all compatible ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances get by default. Messages are formatted as in the examples above."),(0,r.kt)("h3",{id:"notagformatter"},(0,r.kt)("inlineCode",{parentName:"h3"},"NoTagFormatter")),(0,r.kt)("p",null,"Tags are really an Android convention. Other platforms can feel cluttered with them. You can simply ignore them with ",(0,r.kt)("inlineCode",{parentName:"p"},"NoTagFormatter"),". Logging will function the same for Android, and other platforms will ignore the Tag."),(0,r.kt)("h3",{id:"simplelogformatter"},(0,r.kt)("inlineCode",{parentName:"h3"},"SimpleLogFormatter")),(0,r.kt)("p",null,"This formatter skips tags and severity. It just prints the message."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"To simplify setting platform ",(0,r.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances, you can pass a ",(0,r.kt)("inlineCode",{parentName:"p"},"MessageStringFormatter")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"platformLogWriter"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"platformLogWriter(NoTagLogFormatter)\n")))}g.isMDXComponent=!0}}]);