"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[861],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),g=o,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8028:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:25},i="Testing",s={unversionedId:"TESTING",id:"TESTING",title:"Testing",description:"Kermit includes a test dependency, intended for use when testing application code that interacts",source:"@site/docs/TESTING.md",sourceDirName:".",slug:"/TESTING",permalink:"/docs/TESTING",draft:!1,editUrl:"https://github.com/touchlab/Kermit/tree/main/website/docs/TESTING.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1697043712,formattedLastUpdatedAt:"Oct 11, 2023",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Non-Kotlin Environments",permalink:"/docs/configuration/NON_KOTLIN"},next:{title:"iOS Logging",permalink:"/docs/IOS_LOGGING"}},l={},p=[{value:"Add to your dependencies",id:"add-to-your-dependencies",level:2},{value:"Use in your tests",id:"use-in-your-tests",level:2},{value:"Logging on Android",id:"logging-on-android",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"testing"},"Testing"),(0,o.kt)("p",null,"Kermit includes a test dependency, intended for use when testing application code that interacts\nwith Kermit APIs but doesn't want to write to actual logs. This includes a ",(0,o.kt)("inlineCode",{parentName:"p"},"TestLogWriter")," which\nholds the string outputs of log statements, and has APIs for asserting on what logs are present."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The test APIs are not yet stable, and\nrequire ",(0,o.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/opt-in-requirements.html#opt-in-to-using-api"},"opting into"),"\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"@ExperimentalKermitApi")," annotation. The current API is based on what we use to test Kermit internally. It may\nchange dramatically before we stabilize it as we consider more real-world use-cases.")),(0,o.kt)("h2",{id:"add-to-your-dependencies"},"Add to your dependencies"),(0,o.kt)("p",null,"Typically you would depend on this from your test sources."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'sourceSets {\n    commonTest {\n        dependencies {\n            implementation("co.touchlab:kermit-test:1.2.3") //Add latest version\n        }\n    }\n}\n')),(0,o.kt)("h2",{id:"use-in-your-tests"},"Use in your tests"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We strongly recommend you ",(0,o.kt)("em",{parentName:"p"},"inject")," logger instances into your classes rather than simply calling the\n(global) static ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," as it will make testing easier.")),(0,o.kt)("p",null,"Suppose you have a test"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@OptIn(ExperimentalKermitApi::class)\nclass MyExampleTest {\n    private val testLogWriter = TestLogWriter(\n        loggable = Severity.Verbose // accept everything\n    )\n    private val kermit = Logger(\n        TestConfig(\n            minSeverity = Severity.Debug,\n            logWriterList = listOf(testLogWriter)\n        )\n    )\n    \n    // ...\n}\n")),(0,o.kt)("p",null,"You can either interact with the latest log entry that was produced - "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Test\nfun somethingInterestingHappened() {\n    // ...\n\n    testLogWriter.assertCount(1)\n\n    // calls assertTrue() on the result of the lambda\n    testLogWriter.assertLast {\n        message == "the message" && severity == Severity.Info && tag == "my-tag" && throwable == null\n    }\n}\n')),(0,o.kt)("p",null,"or you can interact with the list of log entries directly"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Test\nfun somethingElseInterestingHappened() {\n    // ...\n\n    testLogWriter.assertCount(10)\n\n    with(testLogWriter.logs[3]) {\n        assertEquals("the message", message)\n        assertEquals(Severity.Info, severity)\n        assertEquals("my-tag", tag)\n        assertNull(throwable)\n    }\n}\n')),(0,o.kt)("h2",{id:"logging-on-android"},"Logging on Android"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"default")," setup of Kermit aims to make ",(0,o.kt)("em",{parentName:"p"},"production")," logging as simple as possible.  This\nmeans that the platform logger for Android defaults to passing the log through to Android's logcat\n",(0,o.kt)("inlineCode",{parentName:"p"},"Log()")," method.  Be sure to configure your tests accordingly, as this wont function when running\nunit tests on your local machine!"))}u.isMDXComponent=!0}}]);