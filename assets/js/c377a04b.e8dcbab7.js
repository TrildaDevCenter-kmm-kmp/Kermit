"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>c});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,m=u["".concat(s,".").concat(c)]||u[c]||d[c]||r;return n?o.createElement(m,i(i({ref:t},g),{},{components:n})):o.createElement(m,i({ref:t},g))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={id:"intro",sidebar_position:10},i="Kermit <sub>the log</sub>",l={unversionedId:"intro",id:"intro",title:"Kermit <sub>the log</sub>",description:"Kermit is a Kotlin Multiplatform logging library.",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/touchlab/Kermit/tree/main/website/docs/index.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1677978398,formattedLastUpdatedAt:"Mar 5, 2023",sidebarPosition:10,frontMatter:{id:"intro",sidebar_position:10},sidebar:"tutorialSidebar",next:{title:"Configuration",permalink:"/docs/configuration/"}},s={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"1. Add Dependency",id:"1-add-dependency",level:3},{value:"2. Log",id:"2-log",level:3},{value:"Default LogWriter",id:"default-logwriter",level:3},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Logger",id:"logger",level:3},{value:"LogWriter",id:"logwriter",level:3},{value:"Severity",id:"severity",level:3},{value:"Usage",id:"usage",level:2},{value:"A Note About Tags",id:"a-note-about-tags",level:3}],g={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"kermit-the-log"},"Kermit ",(0,a.kt)("sub",null,"the log")),(0,a.kt)("p",null,"Kermit is a Kotlin Multiplatform logging library."),(0,a.kt)("p",null,"It's primary purpose is to allow log statements from Kotlin code to be written to composable log outputs. Out of the box, the library defaults to platform-specific loggers such as Logcat and OSLog, but is easy to extend and configure."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Check out ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/touchlab/KaMPKit"},"KaMP Kit")," to get started developing for Kotlin Multiplatform")),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Configuration for different environments can get more complex, but the default config out of the box is fairly simple."),(0,a.kt)("h3",{id:"1-add-dependency"},"1. Add Dependency"),(0,a.kt)("p",null,"The Kermit dependency should be added to your ",(0,a.kt)("inlineCode",{parentName:"p"},"commonMain")," source set in your Kotlin Multiplatform module."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'commonMain {\n    dependencies {\n        implementation(kotlin("stdlib-common"))\n        implementation("co.touchlab:kermit:2.0.0-RC") //Add latest version\n    }\n}\n')),(0,a.kt)("h3",{id:"2-log"},"2. Log"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'Logger.i { "Hello World" }\n')),(0,a.kt)("h3",{id:"default-logwriter"},"Default LogWriter"),(0,a.kt)("p",null,"By default, Kermit includes a LogWriter instance for each platform that is configured for ",(0,a.kt)("strong",{parentName:"p"},"development"),"."),(0,a.kt)("p",null,"On Android it writes to Logcat, on iOS it writes to OSLog, and for JS it writes to console."),(0,a.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,a.kt)("p",null,"The basic components you'll need to be aware of are ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"LogWriter"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"Severity"),"."),(0,a.kt)("h3",{id:"logger"},"Logger"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," takes log calls from your code and dispatches them to ",(0,a.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances. There are different methods\non ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," corresponding to different log ",(0,a.kt)("inlineCode",{parentName:"p"},"Severity")," levels. In order of least to most severe: v(), d(), i(), w(), e(), and a()."),(0,a.kt)("p",null,"You configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger"),", then call log methods on it. That's the basic interaction with Kermit."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'Logger.i { "Hello World" }\n\ntry {\n    somethingRisky()\n}\ncatch(t: Throwable){\n    Logger.w(t) { "That could\'ve gone better" }\n}\n')),(0,a.kt)("h3",{id:"logwriter"},"LogWriter"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"LogWriter")," actually sends log messages to different log outputs. You add ",(0,a.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger"),"."),(0,a.kt)("p",null,"Kermit includes a ",(0,a.kt)("inlineCode",{parentName:"p"},"CommonWriter")," and various platform-specific ",(0,a.kt)("inlineCode",{parentName:"p"},"LogWriter")," instances. Through other modules, Kermit also allows logging crash info to Crashlytics and Bugsnag."),(0,a.kt)("p",null,"For more info on included ",(0,a.kt)("inlineCode",{parentName:"p"},"LogWriter")," types, and to create your own, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/details/LOG_WRITER"},"LOG_WRITER")),(0,a.kt)("h3",{id:"severity"},"Severity"),(0,a.kt)("p",null,"Severity levels follow common logging library patterns and should be generally familiar. You can control what will and won't get logged based on severity. So, say you only want to log ",(0,a.kt)("inlineCode",{parentName:"p"},"Warn")," and up, you can tell the logger. We'll cover that more in ",(0,a.kt)("a",{parentName:"p",href:"#Configuration"},"Configuration")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The primary logging artifact is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/touchlab/Kermit/blob/kpg/api_reformat2/kermit/src/commonMain/kotlin/co/touchlab/kermit/Logger.kt"},"Logger"),". It defines the severity-level logging methods. It has a Kotlin-aware api relying on default parameters and lambda syntax."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To log from non-Kotlin clients, that don't support calling Kotlin's default parameters, see ",(0,a.kt)("a",{parentName:"p",href:"/docs/configuration/NON_KOTLIN"},"NON_KOTLIN"),". A common use case would be calling Kermit from Swift or JS.")),(0,a.kt)("p",null,"For each severity, there are two methods. One takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," log message directly, the other takes a function parameter that returns a string. The function is only evaluated if the log will be written. Which you use is personal preference. They both will log to the same places, but the function paramter version may avoid unecessary ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," creation and evaluation."),(0,a.kt)("p",null,"Here are what the ",(0,a.kt)("inlineCode",{parentName:"p"},"w")," method definitions look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Trailing function parameter\nfun w(throwable: Throwable? = null, tag: String = this.tag, message: () -> String)\n\n// String message parameter\nfun w(messageString: String, throwable: Throwable? = null, tag: String = this.tag)\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The function parameter is at the end of the function to support Kotlin's ",(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/lambdas.html#passing-trailing-lambdas"},"trailing lambda syntax"),".")),(0,a.kt)("p",null,"In its most basic form, logging looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'Logger.i { "Hello World" }\n')),(0,a.kt)("p",null,"Some other examples with tags and ",(0,a.kt)("inlineCode",{parentName:"p"},"Throwable")," params."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'Logger.w("MyTag") { "Hello World $someData" }\n// etc\nLogger.e(ex) { "Something failed" }\n// or\nLogger.e("Something failed", ex)\n')),(0,a.kt)("h3",{id:"a-note-about-tags"},"A Note About Tags"),(0,a.kt)("p",null,"Tags are much more common on Android, as Logcat has tag arguments, and it is the default logger on Android. It would be difficult to have a Kotlin Multiplatform library without them, but they don't really fit into other platforms as easily."),(0,a.kt)("p",null,"Kermit's default tag is an empty string. You can supply a tag param to each log call, change the base default tag, or create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," instance with it's own tag. For example, create a field in a ViewModel with the tag set to the class name (a common Android pattern):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyViewModel:ViewModel {\n    private val log = Logger.withTag("MyViewModel")\n}\n')),(0,a.kt)("p",null,"Platform-specific loggers can be configured to ignore tags on output, or you can customize their display easily. We'll discuss these options more in ",(0,a.kt)("a",{parentName:"p",href:"#Configuration"},"Configuration"),"."))}d.isMDXComponent=!0}}]);