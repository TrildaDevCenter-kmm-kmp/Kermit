"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[162],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(g,a(a({ref:t},p),{},{components:r})):n.createElement(g,a({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5207:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const o={sidebar_position:26},a="iOS Logging",l={unversionedId:"IOS_LOGGING",id:"IOS_LOGGING",title:"iOS Logging",description:"There are three LogWriter implementations for iOS.",source:"@site/docs/IOS_LOGGING.md",sourceDirName:".",slug:"/IOS_LOGGING",permalink:"/docs/IOS_LOGGING",draft:!1,editUrl:"https://github.com/touchlab/Kermit/tree/main/website/docs/IOS_LOGGING.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1714492154,formattedLastUpdatedAt:"Apr 30, 2024",sidebarPosition:26,frontMatter:{sidebar_position:26},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/docs/TESTING"},next:{title:"Crash Reporting",permalink:"/docs/crashreporting/"}},s={},c=[{value:"XcodeSeverityWriter",id:"xcodeseveritywriter",level:2},{value:"OSLogWriter",id:"oslogwriter",level:2},{value:"NSLogWriter",id:"nslogwriter",level:2}],p={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ios-logging"},"iOS Logging"),(0,i.kt)("p",null,"There are three ",(0,i.kt)("inlineCode",{parentName:"p"},"LogWriter")," implementations for iOS."),(0,i.kt)("h2",{id:"xcodeseveritywriter"},"XcodeSeverityWriter"),(0,i.kt)("p",null,"This is the default ",(0,i.kt)("inlineCode",{parentName:"p"},"LogWriter"),". It is designed for local development. Each severity is represented with an emoji. ",(0,i.kt)("inlineCode",{parentName:"p"},"Throwable")," instances sent to this writer will be written with ",(0,i.kt)("inlineCode",{parentName:"p"},"println")," rather than oslog because oslog trims long strings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"2023-03-05 08:48:03.864138-0500 KermitSampleIOS[58575:7607179] \ud83d\udfe2 Try a log\n2023-03-05 08:48:04.622452-0500 KermitSampleIOS[58575:7607442] [Bugsnag] [INFO] Sent session 7D3188F7-2B37-4189-9F92-63BC7172D01B\n2023-03-05 08:48:09.999884-0500 KermitSampleIOS[58575:7607179] \ud83d\udfe2 Common click count: 1\n2023-03-05 08:48:11.333941-0500 KermitSampleIOS[58575:7607179] \ud83d\udd35 Common click count: 2\n2023-03-05 08:48:13.104265-0500 KermitSampleIOS[58575:7607179] \ud83d\udfe1 Common click count: 3\n2023-03-05 08:48:13.568351-0500 KermitSampleIOS[58575:7607179] \ud83d\udd34 Common click count: 4\n")),(0,i.kt)("h2",{id:"oslogwriter"},"OSLogWriter"),(0,i.kt)("p",null,"This is the parent class of ",(0,i.kt)("inlineCode",{parentName:"p"},"XcodeSeverityWriter"),". There is no emoji added for severity, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Throwable")," is sent as a string to oslog. This may trim exceptions. You can implement a custom version that writes each line of a stack trace to oslog, or whatever else you'd like to do. Override ",(0,i.kt)("inlineCode",{parentName:"p"},"logThrowable"),"."),(0,i.kt)("h2",{id:"nslogwriter"},"NSLogWriter"),(0,i.kt)("p",null,"Legacy implementation using ",(0,i.kt)("inlineCode",{parentName:"p"},"NSLog"),"."))}m.isMDXComponent=!0}}]);