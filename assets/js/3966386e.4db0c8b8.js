"use strict";(self.webpackChunktouchlab=self.webpackChunktouchlab||[]).push([[620],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),d=r,h=g["".concat(l,".").concat(d)]||g[d]||p[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3472:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:40},i="Bugsnag",s={unversionedId:"bugsnag/README",id:"bugsnag/README",title:"Bugsnag",description:"With the kermit-bugsnag module, you can setup kermit to automatically send bread crumbs and crash reports to Bugsnag.",source:"@site/docs/bugsnag/README.md",sourceDirName:"bugsnag",slug:"/bugsnag/",permalink:"/docs/bugsnag/",draft:!1,editUrl:"https://github.com/touchlab/Kermit/tree/main/website/docs/bugsnag/README.md",tags:[],version:"current",lastUpdatedBy:"Kevin Galligan",lastUpdatedAt:1676861205,formattedLastUpdatedAt:"Feb 20, 2023",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"tutorialSidebar",previous:{title:"Crashlytics",permalink:"/docs/crashlytics/"},next:{title:"Design Philosophy",permalink:"/docs/DESIGN"}},l={},u=[{value:"Step 1: Add Bugsnag to Your Project",id:"step-1-add-bugsnag-to-your-project",level:2},{value:"Step 2: Setup Kermit Crashlogging",id:"step-2-setup-kermit-crashlogging",level:2},{value:"iOS",id:"ios",level:3},{value:"Testing",id:"testing",level:2},{value:"NSExceptionKt",id:"nsexceptionkt",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"bugsnag"},"Bugsnag"),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"kermit-bugsnag")," module, you can setup kermit to automatically send bread crumbs and crash reports to Bugsnag."),(0,r.kt)("p",null,"If you just want to write crash reports without using Kermit logging, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/touchlab/CrashKiOS"},"CrashKiOS")),(0,r.kt)("h2",{id:"step-1-add-bugsnag-to-your-project"},"Step 1: Add Bugsnag to Your Project"),(0,r.kt)("p",null,"If you already have your app setup with bugsnag, you can skip this step, otherwise follow the steps in the Bugsnag docs\nto add Bugsnag crash reporting to both your ",(0,r.kt)("a",{parentName:"p",href:"https://docs.bugsnag.com/platforms/android/"},"Android")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.bugsnag.com/platforms/ios/"},"iOS")," apps."),(0,r.kt)("h2",{id:"step-2-setup-kermit-crashlogging"},"Step 2: Setup Kermit Crashlogging"),(0,r.kt)("p",null,"First, make sure you have a dependency on ",(0,r.kt)("inlineCode",{parentName:"p"},"kermit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kermit-bugsnag")," artifacts in your ",(0,r.kt)("inlineCode",{parentName:"p"},"commonMain")," source set in\nyour shared modules ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'    sourceSets {\n        commonMain {\n            dependencies {\n                implementation("co.touchlab:kermit:${KERMIT_VERSION}")\n                implementation("co.touchlab:kermit-bugsnag:${KERMIT_VERSION}")\n            }\n        }\n...\n')),(0,r.kt)("p",null,"Second, setup the ",(0,r.kt)("inlineCode",{parentName:"p"},"BugsnagLogWriter")," with your ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger"),". The constructor for both platforms is the same, so in\nshared code, or in platform-specific Kotlin, run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"Logger.addLogWriter(BugsnagLogWriter())\n")),(0,r.kt)("p",null,"On either platform, you should make sure logging is configured immediately after Bugsnag is initialized, to avoid\na gap where some other failure may happen but logging is not capturing info."),(0,r.kt)("h3",{id:"ios"},"iOS"),(0,r.kt)("p",null,"Crash logging on iOS requires a few extra steps. Kermit provides wrapper functions that call into CrashKiOS underneath. You can read more about those methods in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/touchlab/CrashKiOS"},"CrashKiOS README"),". In our example here, we'll use ",(0,r.kt)("inlineCode",{parentName:"p"},"startBugsnag()")," wrapper function."),(0,r.kt)("p",null,"If you don't need to make kermit logging calls from Swift/Objective C code, we recommend not exporting Kermit in the\nframework exposed to your iOS app. To setup Kermit configuration you can make a top level helper method in the ",(0,r.kt)("inlineCode",{parentName:"p"},"iosMain"),"\nsourceset that you call from Swift code to avoid binary bloat. The same rule of thumb applies to ",(0,r.kt)("inlineCode",{parentName:"p"},"kermit-bugsnag")," and\nsince the added api is only needed for configuration, a Kotlin helper method is almost always the best option. Here is a basic example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"// in Kermit/AppInit.kt\nfun startKermit(config: BugsnagConfiguration) {\n    startBugsnag(config)\n    Logger.addLogWriter(BugsnagLogWriter())  \n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"// in AppDelegate.swift\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    ...\n    func application(\n        _ application: UIApplication, \n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n    ) -> Bool {\n        // Note: This MUST be the first two statement, in this order, for Kermit and Bugsnag\n        // to handle any crashes in your app launch. \n        // If the app crashes before these calls run, it will not show up properly in the dashboard\n        let config = BugsnagConfiguration.loadConfig()\n        AppInitKt.startKermit(config: config)\n        //...\n    }\n}\n")),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"If you're building a dynamic framework, or you're using Kotlin version 1.8.0+ which builds dynamic by default,\nbuilding for tests will give you an error like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'Undefined symbols for architecture x86_64:\n  "_OBJC_CLASS_$_BugsnagFeatureFlag", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:bugsnag-cache.a(result.o)\n  "_OBJC_CLASS_$_BugsnagStackframe", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:bugsnag-cache.a(result.o)\n  "_OBJC_CLASS_$_BugsnagError", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:bugsnag-cache.a(result.o)\n  "_OBJC_CLASS_$_Bugsnag", referenced from:\n      objc-class-ref in libco.touchlab.crashkios:bugsnag-cache.a(result.o)\n      objc-class-ref in libco.touchlab:kermit-bugsnag-cache.a(result.o)\nld: symbol(s) not found for architecture x86_64\n')),(0,r.kt)("p",null,"To resolve this, you should tell the linker that Bugsnag will be added later. You can do that directly, or you can use our Gradle plugin. It will find all Xcode Frameworks being built by Kotlin and add the necessary linker arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n  id("co.touchlab.crashkios.bugsnaglink") version "x.y.z"\n}\n')),(0,r.kt)("h2",{id:"nsexceptionkt"},"NSExceptionKt"),(0,r.kt)("p",null,"CrashKiOS and Kermit previously created 2 reports on a crash because none of the crash reporting clients had an obvious way to do one. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rickclephas"},"Rick Clephas")," has done some excellent work figuring that out with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rickclephas/NSExceptionKt"},"NSExceptionKt"),". CrashKiOS and Kermit now use parts of NSExceptionKt for crash handling."))}p.isMDXComponent=!0}}]);